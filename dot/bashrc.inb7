# Late-ish running setup for full cjs environment

#############################################################
# Bash Configuration

#   If interactive, reset readline config in case something added.
[[ $- = *i* ]] && bind -f ~/.inputrc

#   Keep history only in RAM to avoid security issues.
unset HISTFILE

####################################################################
#   Prompt setup

#   Update xterm title bar before each prompt if xtitle is available
#   XXX Can't use `-v PROMPT_COMMAND` in Bash ≤4.1 (Ubuntu 10.04, MacOS?)`
#   So set it to a single space to disable this custom prompt.
[[ -z $PROMPT_COMMAND ]] && xtitle -x >/dev/null 2>&1 && PROMPT_COMMAND=xtitle

#   Variables used by the prompt. These avoid running the commands every time
#   we print the prompt, for slight efficiency gain. We never export them
#   because other processes should do their own checks on their environment.

__cjs_prompt_user="$(id -u -n)"

__cjs_prompt_host=
#   Hosts not matching *.cynic.net FQDN are considered "foreign" hosts.
#   (But being in a container overrides this.)
[[ $(hostname -f) == *.cynic.net ]] || __cjs_prompt_host=f
#   We consider ourselves to be "containerized" if our root process
#   does not have the word "init" in its path.
[[ -e /proc/1/cmdline ]] && {
    case $(tr '\000' ' ' < /proc/1/cmdline) in
        */systemd\ --system*)       ;;
        *init*)                     ;;
        *)                          __cjs_prompt_host=c;;
    esac
}

__cjs_prompt() {
    local exitcode="$?"

    #   \001…\002 tells readline not to count these as printing chars.
    #   This can be done as \[…\] in some circumstances, but not all.
    #   See: https://stackoverflow.com/q/24839271/107294
    local      bold=$'\001\E[01m\002'
    local underline=$'\001\E[01m\002'
    local       inv=$'\001\E[07m\002'
    local       red=$'\001\E[31m\002'
    local     green=$'\001\E[32m\002'
    local    yellow=$'\001\E[33m\002'
    local      blue=$'\001\E[34m\002'
    local  bgyellow=$'\001\E[43m\002'
    local   bgwhite=$'\001\E[47m\002'
    local   boldred=$'\001\E[1;31m\002'
    local      none=$'\001\E[m\002'         # At end so `declare -f` looks ok
    #   Above is mostly documentation for further use elsewhere;
    #   we should probably extract it.
    local    pcolor="$blue$bold"

    local exitprint
    case "$exitcode" in
        0) exitprint='' ;;
        *) exitprint="${red}${exitcode}${none} ";;
    esac

    local pp=''                                         # prompt prefix for:
    [[ $TMUX = */tmate-* ]] && pp="${pp}t"              # - tmate
    [[ -n $STY ]] && pp="${pp}s"                        # - screeen
    pp="${pp}$__cjs_prompt_host"                        # - host indicator

    if [[ $EUID -eq 0 ]]; then
        echo "$exitprint$pcolor$pp#$none "
    elif [[ $__cjs_prompt_user =~ ^(cjs|curt|c?samp) ]]; then
        echo "$exitprint$pcolor$pp\$$none "
    else
        echo "$__cjs_prompt_user $exitprint$pcolor$pp\$$none "
    fi
}
PS1='$(__cjs_prompt)'

####################################################################

# Most systems (Debian 8, CentOS 7) you can just `shopt -s progcomp`
# and `/etc/profile.d/bash_completion.sh` will take care of this.
# But doing this ourselves means we don't turn on `progcomp` unless
# we have the `bash_completion` script to run.
#
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    elif [ -f /usr/local/etc/bash_completion ]; then
        . /usr/local/etc/bash_completion    # MacOS X Homebrew
    fi
fi

if shopt -q progcomp; then
    ~/.local/share/bash-completion/generate-completions
    for i in ~/.local/share/bash-completion/completions/*; do
        [[ -r "$i" ]] && source "$i"
    done
fi

#   Copy a completion to an alias, assuming standard autoload coventions of
#   the bash-completion package. (Actually, doesn't quite work because some
#   completions use __$command as the function instead of _$command.)
#
usecompletion() {
    local command="$1" alias="$2"
    local -a compdirs=(
        ~/.local/share/bash-completion/completions
        /usr/share/bash-completion/completions
        /etc/back_completion.d
    )
    for compdir in "${compdirs[@]}"; do
        local compfile=$compdir/$command
        [[ -r $compfile ]] && { . $compfile; break; }
    done
    complete -F _$command $alias
}

#   Log information about current completion variables.
#   This is useful when debugging completion functions.
comp_log() {
    cat >> ~/tmp/complog <<____

complog: "$@"
COMP_TYPE=$COMP_TYPE
COMP_KEY=$COMP_KEY
COMP_LINE=$COMP_LINE
COMP_POINT=$COMP_POINT
COMP_WORDS=${COMP_WORDS[@]}
COMP_CWORD=$COMP_CWORD
COMP_WORDBREAKS=$COMP_WORDBREAKS
____
}

set -o vi

############################################################
# Handy aliases

#   Similar functionality will be added to the dot-home system,
#   but in the meantime we have this quickie:
re() { dot-home-setup "$@"; . $HOME/.bashrc; }

#   My `cd` sets CWD after dereferencing symlinks.
#   If we deref, print the actual dir to stdout after the change.
#
#   We really should look at whether we should be using this technique,
#   aliasing `cd` to `cd -P`, or just setting `-o physical`. As well as
#   what gets printed, there's also the isssue of how `..` is treated
#   in the argument.
#
cd() {
    local oldpwd="$(pwd -P)"
    command cd "$@" || return $?
    #   Bash keeps cwd info independent of $PWD, so we can't just reset that.
    if [ "$(pwd -L)" != "$(pwd -P)" ]; then
        CDPATH="" command cd "$(pwd -P)" || return $?
        #   We print to stdout because that's what `cd` itself does when
        #   given `-` or changing to a directory found via $CDPATH.
        pwd
    fi
    OLDPWD="$oldpwd"
}

eval $(xtitle -x 2>/dev/null)   # define xt() function
xtr() {     # Set xtitle to command name and run command
    [[ -z $1 ]] && { echo 1>&2 "Usage: xtr <command>"; return 1; }
    eval $(xtitle -e "$1")
    "$@"
}

#   Quick command-line calculator; leaves result in $last
#   When non-interactive, translates ',' to ';' (to avoid having to
#   quote multiple expressions) and [a-f] to [A-F] (to allow
#   lower-case hexadecimal numbers) to make quick calculations easier
#   to type, at the cost of being unable to use variables, etc.
calc() {
    local scale=3 ibase=10 obase=10 trfrom=',a-f' trto=';A-F'
    while true; do case "$1" in
        -[0-9][0-9])    scale="${1#-}"; shift;;
        -[0-9])         scale="${1#-}"; shift;;
        -H)             ibase=16; shift;;
        -h)             obase=16; shift;;
        -Hh)            ibase=16; obase=16; shift;;
        -hH)            ibase=16; obase=16; shift;;
        *)              break;;
    esac; done
    #   Note that obase must be set before ibase to ensure we're
    #   specifying ibase in decimal.
    local initstr="scale=$scale; obase=$obase; ibase=$ibase; "
    if [[ -z $1 ]]; then  # interactive mode, with given scale.
        (echo "$initstr"; cat) | bc -q
    else
        [[ ibase -le 10 ]] && {
            #   In base 10 or less we do not translate a-f to upper case,
            #   letting us use those as variables instead of digits.
            trfrom=','; trto=';';
        }
        #   $last is available after this function exits à la the
        #   "last" variable in bc. `declare -g` isn't available in
        #   Bash <4.2, so there we just set it without declaring it
        #   local and hope for the best.
        declare -g last 2>/dev/null || true
        last=$(
            (echo "$initstr"; echo "$@" \ | tr "$trfrom" "$trto")           \
            | bc -q                                                         \
            | sed -e '/\./s/0*$//' -e 's/\.$//'                             \
            | sed -e :a  -e 'N;s/\n/, /;ta'                                 \
            )
            #   sed: remove trailing 0s, remove trailing decimal points,
            #   sed: join lines with comma separator
        echo "$last"
    fi
}
#   Alias that lets us avoid quoting expressions with parens, etc.
#   Works similar to vc/vc_literal() below, except we must preserve
#   word splits since we're not doing another eval.
alias c='calc_literal #'
calc_literal() {
    set - $(fc -l -n -1 | sed -e 's/^[[:space:]]*c //')
    calc "$@"
}

idal() {
    #   As idat() below, but use use a single letter 'a-km' for the month.
    #   (We skip 'l' because it looks too much like '1'.)
    #   This makes it easier to read (breaking up the string of numbers)
    #   and also removes a step from auto-completion in some circumstances.
    local y=$(date +%y)
    local m=$(date +%m)
    local d=$(date +%d)
    if [[ $m < 10 ]]    # cannot use numeric compare here; "0n" is octal
        then  m=$(echo ${m#0} | tr 1-9 a-i)
        else m=$(echo ${m#1} | tr 0-2 jkm)
        fi
    echo "$y$m$d"
}
idat()          { date "+%y%m%d" "$@"; }
idate()         { date "+%Y%m%d" "$@"; }
i-date()        { date "+%Y-%m-%d"; }
i-datew()       { date "+%Y-%m-%d %a"; }
itime()         { date "+%Y%m%d-%H%M%S" "$@"; }
i-time()        { date "+%Y-%m-%d %H:%M"; }

#   This is aliased by some default .bashrc configurations.
unalias ll 2>/dev/null || true

#   While this provides memory usage information, it always runs a
#   subprocess and so can't be used to time built-in shell commands.
#   For that, use the built-in `time`.
tm() {
    local time=/usr/bin/time
    [ $(uname) = Darwin ] && time=/usr/local/bin/gtime
    $time --format '%e user=%U system=%S rss=%MK' "$@"
}

dum()           { du -ms "$@" | sort -n; }
dfh()  {
    if [ $(uname) = Linux ]; then
        df -hT -x tmpfs -x devtmpfs -x debugfs "$@" \
            | sed -e '/^[^ ]*$/N' -e 's/\n//g' \
                -e 's/Use%/Use/' -e 's/Avail/Free/' \
            | while read fs type size used avail use mounted; do
                  printf '%-31s %-4.4s %4s %5s %3s %4s %s\n' \
                      $(echo "$fs" | sed -e 's,/dev/,,') \
                      "$type" "$size" "$used" "$use" "$avail" "$mounted"
              done
    else
        df -h "$@"
    fi
}

scl()           { systemctl "$@"; }; usecompletion systemctl scl
more()          { less "$@"; }
nman()          { nroff -mandoc "$@" | less; }
sortip()        { sort -n -t . -k1,1 -k2,2 -k3,3 -k4,4 "$@"; }

ssha()          { ssh -o StrictHostKeyChecking=ask "$@"; }
sk()            {
    env | grep '^SSH_AUTH_SOCK=' \
        || echo 1>&2 "Warning: SSH_AUTH_SOCK not set in environment"
    ssh-add -l "$@"
}

dr() {
    local drhost="${DOCKER_HOST:-unix:///var/run/docker.sock}"
    local drsock=''
    local sudo=''
    case "$drhost" in unix://*) drsock="${drhost#unix://}";; esac
    #   MSYSTEM set indicates Bash on Windows
    [[ -z $MSYSTEM && -n $drsock && ! -w $drsock ]] && sudo=sudo
    #   If we sudo our $HOME may be set to /root/, but we still want
    #   to use our own config for access tokens, etc.
    $sudo docker --config ~/.docker/ "$@";
};  usecompletion docker dr

drc() {
    if [[ ${#@} -gt 0 ]]; then
        dr container "$@"
    else
        #   We don't use {{.Size}} here because it's _very_ slow.
        dr container ls -a --format \
            'table {{.Names}}\t{{.Image}}\t{{.Status}}'
    fi
}
dri() { dr image "${@:-ls}"; }
drr() { dr run "$@"; }

#   Iterate a list of commands until it fails. Typical use:
#       iter myserver status && sleep 10
alias iter='iter_literal #'
iter_literal() {
    cmd=$(history 1 | sed -e 's/ *[0-9]\+ *iter *//')
    #echo "raw: $cmd"
    #echo -n "eval: "; eval "$cmd"
    while eval "$cmd"; do :; done
}

#   Given (possibly relative) paths to executables, create a symlink
#   to each in $HOME/.local/bin/. Use `-f` to force the removal of an
#   existing file at the target.
lnbin() {
    local force='' src exitcode=0
    [[ $1 == -f ]] && { force='-f'; shift; }
    for src in "$@"; do
        [[ -x $src ]] || {
            echo 1>&2 "Source not executable: $src"; exitcode=1; continue;
        }
        src=$(realpath "$src")      # Resolve relative paths
        src=${src/#$HOME/..\/..}    # Use relative link if target under $HOME
        ln $force -s "$src" $HOME/.local/bin || exitcode=$?
    done
    return $exitcode
}

#   iostat in a compact format for all devices on the system
#   parameters are passed to iostat, e.g., `3` to update every 3 sec.
ciostat() {
    local dev=""
    [[ ${#@} -eq 0 ]] && dev=ALL
    iostat --pretty -m -s -d -H -g $dev "$@" \
        | sed -e '/^$/d' -e '5,$ { / tps /d }'
}

############################################################
#   Editor functions

#   Vim selection and startup is handled by cjs0:bin/vi, so functions
#   here should call only that.
unset   vi vim view vil     # Remove any functions from old versions.
unalias vi vim view vil 2>/dev/null || true
view()  { command "$EDITOR" -R "$@"; }
vil()   { command "$EDITOR" -c "normal '0" "$@"; }  # vim at last location

# vc - edit files listed by output of a command
#
# This doesn't work in many circumstances:
#   * When vc is not the first command on the line.
#   * In most non-Bash shells, though they can at least parse it
#     without errors.
#   * Probably others I've not thought of.
#
# This is a tricky combination of shell alias and function so that we
# can avoid having to quote the command given to vc. Not only is this
# more convenient for the use of vc itself, but it also lets us try out
# the command alone and, when it generates the list of files in which
# we're interested, go back in the history and simply prepend "vc " to
# it to edit those files.
#
# Basically, the vc alias ignores all of its arguments as a comment
# and just calls the vc_literal function. This, however, leaves the
# unprocessed arguments in the shell history which we can then extract
# using the bash history command and use to create a new command line
# which we can then evaluate.
#
# For a detailed analysis of this and related tricks, see
#   http://www.chiark.greenend.org.uk/~sgtatham/aliases.html
#
alias vc="vc_literal #"
vc_literal() {
    cmd=$(fc -l -n -1 | sed -e 's/^[[:space:]]*vc //')
    #echo "raw: $cmd"
    #echo -n "eval: "; eval "$cmd"
    "$EDITOR" $(eval "$cmd")
}

######################################################################
#   Nix Configuration

#   This is for a single-user install of Nix; I don't yet know if a shared
#   install (using the daemon) uses this or /etc/profile.d. I don't want
#   this at the moment anyway, since I use Nix only via Devbox, which knows
#   how to find Nix under ~/.nix-profile.

#. /home/cjs/.nix-profile/etc/profile.d/nix.sh

######################################################################
#   Python Configuration

export PYTHONPYCACHEPREFIX=~/.cache/pycache__       # Python ≥3.8

get-python-activate() {
    local repo=0cjs/sedoc
    local ref=master
    local file=lang/python/runtime/activate
    local url="https://github.com/$repo/blob/$ref/$file"
    local rawurl="https://raw.githubusercontent.com/$repo/$ref/$file"
    echo "Source $url"
    echo "Downloading $rawurl"
    #   For convenience, we overwrite existing `activate` without notice.
    #   Ensuring we're in a worktree minimizes the risk we lose data.
    local worktree=$(git rev-parse --is-inside-work-tree 2>/dev/null || true)
    [[ $worktree = true ]] || { echo 1>&2 "Not in git work tree."; return 2; }
    curl --progress-bar -o activate "$rawurl"
}

#   Python multi-version installation manager
#   XXX .pythonz/etc/bashrc sets a whole pile of vars we should make local
[[ -s ~/.pythonz/etc/bashrc ]] && . ~/.pythonz/etc/bashrc
pzver() {
    #   Given an array with two-component Python version element in it
    #   (e.g., `2.7` or `3.10`, return the array with that replaced with
    #   the latest three-component version (2.7.18 or 3.10.13) that
    #   `pythonz` knows about.
    local words=("$@") i v
    for i in "${!words[@]}"; do
        word="${words[$i]}"
        [[ $word =~ ^[23].[0-9]+$ ]] || continue
        v=$(set +o pipefail;
            pythonz list -a | grep -F "$word" | sort -t. -k3 -n | tail -1)
        [[ -n $v ]] && words[$i]="$v"
    done
    echo "${words[@]}"
}
pz() {
    #   Old versions of Python fail with a segmentation fault (sometimes?)
    #   on Debian 12 / Ubuntu 21.10. -O2 fixes this. Note we cannot use
    #   PYTHON_CFLAGS because that's only pyenv/asdf/etc., not pythonz.
    #   (And CFLAGS change doesn't always work anyway, e.g. 3.6.)
    #   This is a hack, not a fix, but see:
    #   • https://stackoverflow.com/q/70064631/107294
    #   • https://askubuntu.com/q/1376525
    #   • https://github.com/python/cpython/issues/72174
    local pzargs=($(pzver "$@"))
    CFLAGS='-O2' pythonz "${pzargs[@]}"
}

#   Python virtual environment support using `pactivate`, if available.
[[ -r ~/co/public/gh/cynic-net/pactivate/pae ]] \
    && . ~/co/public/gh/cynic-net/pactivate/pae

######################################################################
#   Haskell Configuration

#   Probably should be made lazy.
type stack >/dev/null 2>&1 && eval "$(stack --bash-completion-script stack)"

#   Ensure final test above does not leave bad exit status if this
#   file is sourced stand-alone.
true

######################################################################
#   Rust Configuration

#   This just prefixes "$HOME/.cargo/bin" to $PATH if it's not already
#   in the path. We don't do this by default because, tentatively,
#   build systems should be able to find this and do it themselves.
#[[ -r $HOME/.cargo/env ]] && . "$HOME/.cargo/env"
